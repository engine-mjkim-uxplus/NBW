<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalpj.nbw.product.dao.ProductMapper">

	<select id="getProduct" parameterType="String" resultType="com.finalpj.nbw.product.domain.Product">
		SELECT P_NO, P_TITLE, P_AUTHOR, P_PUBLISHER, P_PUBDATE, P_PRICE, P_IMG,P_DESCRIPTION, P_CATEGORY, P_LIKE, P_REVIEW, P_AVGSCORE , P_COUNT
		FROM TB_PRODUCT WHERE p_no = #{value}
	</select>
	
 	<select id="SelectReviewList" parameterType="map" resultType="review">
        SELECT rnum, MEM_ID, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, MEM_NICKNAME, RV_NO
                FROM(
                    SELECT ROWNUM as rnum, a.*  FROM (
                        SELECT MEM_ID, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, MEM_NICKNAME, RV_NO
                        FROM TB_REVIEW WHERE P_NO = #{p_no}
                    ) a
                )
        WHERE <![CDATA[#{offset} < rnum  and rnum <= #{offsetTo}]]>
	</select>
	
	 <select id="getReviewListMap" parameterType="map" resultType="map">
        SELECT rnum, MEM_ID, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, MEM_NICKNAME, RV_NO
                FROM(
                    SELECT ROWNUM as rnum, a.*  FROM (
                        SELECT MEM_ID, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, MEM_NICKNAME, RV_NO
                        FROM TB_REVIEW WHERE P_NO = #{p_no}
                    ) a
                )
        WHERE <![CDATA[#{offset} < rnum  and rnum <= #{offsetTo}]]>
	</select>
	
	<select id="getMemberReview" parameterType="map" resultType="review">
		SELECT rnum, MEM_ID, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, MEM_NICKNAME, RV_NO
                FROM(
                    SELECT ROWNUM as rnum, a.*  FROM (
                        SELECT MEM_ID, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, MEM_NICKNAME, RV_NO
                        FROM TB_REVIEW WHERE P_NO = #{p_no} AND MEM_ID = #{mem_id}
                    ) a
                )
        WHERE rnum = 1
	</select>
	
	<update id="reviewUpdate" parameterType="review">
		<choose>
		    <when test="fileSize == 1">
				UPDATE TB_REVIEW 
				SET RV_CONTENT = #{rv_content}, RV_SCORE = #{rv_score}, RV_DATE = SYSDATE, RV_IMG = #{rv_image}
				WHERE RV_CONTENT = (
					SELECT RV_CONTENT
					 FROM(
						SELECT ROWNUM as rnum, RV_CONTENT FROM (
							SELECT RV_CONTENT FROM TB_REVIEW WHERE P_NO = #{p_no} AND MEM_ID = #{mem_id}
							)
					)WHERE rnum = 1)
		    </when>
		    <when test="fileSize == 2">
				UPDATE TB_REVIEW 
				SET RV_CONTENT = #{rv_content}, RV_SCORE = #{rv_score}, RV_DATE = SYSDATE, RV_IMG = #{rv_image}, RV_IMG2 = #{rv_image2}
				WHERE RV_CONTENT = (
					SELECT RV_CONTENT
					 FROM(
						SELECT ROWNUM as rnum, RV_CONTENT FROM (
							SELECT RV_CONTENT FROM TB_REVIEW WHERE P_NO = #{p_no} AND MEM_ID = #{mem_id}
							)
					)WHERE rnum = 1)
		    </when>
		    <when test="fileSize == 3">
				UPDATE TB_REVIEW 
				SET RV_CONTENT = #{rv_content}, RV_SCORE = #{rv_score}, RV_DATE = SYSDATE, RV_IMG = #{rv_image}, RV_IMG2 = #{rv_image2}, RV_IMG3 = #{rv_image3}
				WHERE RV_CONTENT = (
					SELECT RV_CONTENT
					 FROM(
						SELECT ROWNUM as rnum, RV_CONTENT FROM (
							SELECT RV_CONTENT FROM TB_REVIEW WHERE P_NO = #{p_no} AND MEM_ID = #{mem_id}
							)
					)WHERE rnum = 1)
		    </when>
		    <otherwise>
				UPDATE TB_REVIEW 
				SET RV_CONTENT = #{rv_content}, RV_SCORE = #{rv_score}, RV_DATE = SYSDATE
				WHERE RV_CONTENT = (
					SELECT RV_CONTENT
					 FROM(
						SELECT ROWNUM as rnum, RV_CONTENT FROM (
							SELECT RV_CONTENT FROM TB_REVIEW WHERE P_NO = #{p_no} AND MEM_ID = #{mem_id}
							)
					)WHERE rnum = 1)
		    </otherwise>
		</choose>
	</update>
	
	<delete id="reviewDelete" parameterType="review">
		DELETE FROM TB_REVIEW
		WHERE RV_NO = #{rv_no}
	</delete>
	
	<select id="getBestProducts" parameterType="map" resultType="product">
		SELECT ROWNUM, P_NO, P_TITLE, p_author, P_PRICE, P_IMG FROM (
		    SELECT P_NO, P_TITLE, p_author, P_PRICE, P_IMG FROM TB_PRODUCT
		    WHERE P_CATEGORY = ( SELECT P_CATEGORY FROM TB_PRODUCT WHERE P_NO = #{p_no} )
		    AND NOT P_NO = #{p_no}
		    ORDER BY P_REVIEW DESC
		) WHERE <![CDATA[ROWNUM < #{count}]]>
	</select>
	
	<!-- ===================================== 공통부분 ===================================== -->
	<!-- ===================================== 상품 등록 ===================================== -->
	<insert id="insertProduct" parameterType="product">
		INSERT INTO TB_PRODUCT (
								 P_NO
							   , P_TITLE
							   , P_AUTHOR
							   , P_IMG
							   , P_PUBLISHER
							   , P_PUBDATE
							   , P_PRICE
							   , P_DESCRIPTION
							   , P_CATEGORY
							   , P_COUNT
		)
		VALUES (
				   SEQ_P_NO.nextval
			   , #{p_title}
			   , #{p_author}
			   , #{p_img}
			   , #{p_publisher}
			   , #{p_pubdate}
			   , #{p_price}
			   , #{p_description}
			   , #{p_category}
			   , #{p_count}
			   )
	</insert>


	<sql id="criteria">
		<if test="keyword != null">
			like '%'||#{keyword}||'%'
		</if>
	</sql>
	
	<!-- ===================================== 제목 키워드 검색
	사용자가 입력한 키워드가 제목, 작가에 포함되어있는 상품의 제목을 반환================================================= -->
	<select id="selectProductByWord"  resultType="java.util.List">
		SELECT DISTINCT *
		FROM TB_PRODUCT
		WHERE
		P_TITLE <include refid="criteria"/>
		OR
		p_author <include refid="criteria"/>
		ORDER BY P_TITLE ASC
	</select>

	<update id="updateLike" parameterType="map">
		UPDATE TB_PRODUCT 
		SET P_LIKE = P_LIKE + #{value}
		WHERE P_NO = #{p_no}
	</update>
	
	<update id="reviewCountUpdate" parameterType="review">
		UPDATE TB_PRODUCT
		SET P_REVIEW = P_REVIEW + 1,
		P_AVGSCORE = (SELECT SUM(RV_SCORE) FROM TB_REVIEW WHERE P_NO = #{p_no}) / (SELECT COUNT(RV_SCORE) FROM TB_REVIEW WHERE P_NO = #{p_no})
		WHERE P_NO = #{p_no}
	</update>
	
	<update id="reviewCountDelete" parameterType="review">
		UPDATE TB_PRODUCT
		SET P_REVIEW = P_REVIEW - 1,
		P_AVGSCORE = (SELECT SUM(RV_SCORE) FROM TB_REVIEW WHERE P_NO = #{p_no}) / (SELECT COUNT(RV_SCORE) FROM TB_REVIEW WHERE P_NO = #{p_no})
		WHERE P_NO = #{p_no}
	</update>
	
	<insert id="reviewInsert" parameterType="review">
  		<choose>
		    <when test="fileSize == 1">
		    	INSERT INTO TB_REVIEW
				(MEM_ID, MEM_NICKNAME, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_NO)
				VALUES (#{mem_id}, #{mem_nickname}, #{rv_content}, #{rv_score}, SYSDATE, #{p_no}, #{rv_image}, SEQ_RV_NO.NEXTVAL)
		    </when>
		    <when test="fileSize == 2">
		    	INSERT INTO TB_REVIEW
				(MEM_ID, MEM_NICKNAME, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_NO)
				VALUES (#{mem_id}, #{mem_nickname}, #{rv_content}, #{rv_score}, SYSDATE, #{p_no}, #{rv_image}, #{rv_image2}, SEQ_RV_NO.NEXTVAL)
		    </when>
		    <when test="fileSize == 3">
		    	INSERT INTO TB_REVIEW
				(MEM_ID, MEM_NICKNAME, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3, RV_NO)
				VALUES (#{mem_id}, #{mem_nickname}, #{rv_content}, #{rv_score}, SYSDATE, #{p_no}, #{rv_image}, #{rv_image2}, #{rv_image3}, SEQ_RV_NO.NEXTVAL)
		    </when>
		    <otherwise>
		    	INSERT INTO TB_REVIEW
				(MEM_ID, MEM_NICKNAME, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_NO)
				VALUES (#{mem_id}, #{mem_nickname}, #{rv_content}, #{rv_score}, SYSDATE, #{p_no}, SEQ_RV_NO.NEXTVAL)
		    </otherwise>
		</choose>
	</insert>
	
	<select id="getReviewTotalCnt" resultType="int" parameterType="String">
		SELECT count(*)
        FROM(
                SELECT ROWNUM as rnum, a.*  FROM (
                     SELECT MEM_ID, MEM_NICKNAME, RV_CONTENT, RV_SCORE, RV_DATE, P_NO, RV_IMG, RV_IMG2, RV_IMG3 FROM TB_REVIEW
                     WHERE P_NO = #{value}
                 ) a
            )
	</select>
	
	<!-- ================================== 상품 목록 조회 > 페이징 포함 ================================== -->
	<select id="selectProduct"  resultType="product">
		SELECT last.*
			FROM
				  (SELECT rownum AS rn, od.*
				  FROM (
				  				select * from tb_product
				                 <choose>
									<when test ='sort == "recent" '>ORDER BY P_PUBDATE DESC</when>
									<when test ='sort == "sell" '>ORDER BY P_TSELL DESC</when>
									<when test ='sort == "lowerprice" '>ORDER BY Cast(P_PRICE AS INTEGER) ASC</when>
									<when test ='sort == "higherprice" '>ORDER BY Cast(P_PRICE AS INTEGER) DESC</when>
									<when test ='sort == "review" '>ORDER BY P_REVIEW DESC</when>
									<when test ='sort == "like" '>ORDER BY P_LIKE DESC</when>
									<when test ='sort == "score" '>ORDER BY P_AVGSCORE DESC</when>
								</choose>
				                 )od
		<choose>
			<when test="keyword !=null and !keyword.equals('')">
					WHERE (
					P_TITLE <include refid="criteria"/>
					OR
					P_AUTHOR <include refid="criteria"/>
					)
				<if test ='type == "C" '>
					AND P_CATEGORY = #{p_category}
				</if>
			</when>
			<when test ='type == "C" '>
				WHERE P_CATEGORY = #{p_category}
			</when>
		</choose>
			  	) last
		<![CDATA[
		WHERE  rn >(#{pageNum}-1) * #{amount} and rn <= #{pageNum}*#{amount}
			]]>
	</select>

	<!--  ============================== 검색된 게시물 총 개수 ==================================	-->
	<select id="selectTotalProduct" resultType="int">
		SELECT count(*)
		FROM tb_product
		<choose>
			<when test=' keyword !=null and !keyword.equals("")'>  --키워드로만 검색할 경우
				WHERE
				(P_TITLE	<include refid="criteria"/>
				OR
				P_AUTHOR <include refid="criteria"/>)
				<if test ='type == "C" '>
					AND P_CATEGORY = #{p_category}
				</if>
			</when>
			<when test ='type == "C" '> -- 타입으로만 검색할 경우
				WHERE P_CATEGORY = #{p_category}
			</when>
		</choose>
	</select>

	<!--  ============================== 카테고리로 상품 검색 ==================================	-->
	<select id="selectProductCategory" resultType="String">
		SELECT DISTINCT p_category as categoryCode FROM TB_PRODUCT
		    <choose>
				<when test="keyword !=null and !keyword.equals('')">
					WHERE
					P_TITLE <include refid="criteria"/>
					OR
					P_AUTHOR <include refid="criteria"/>
				</when>
				<when test='type="C"'>
					WHERE P_CATEGORY =#{p_category}
				</when>
			</choose>

	</select>

	<!--  ========================== 키워드 검색 결과 조회된 카테고리의 개수 ==============================	-->
	<select id="selectProductCateInfo"  resultType="categoryFilter">
		SELECT DISTINCT count(*) as categoryCount
		FROM (
				SELECT *
				FROM TB_PRODUCT
				<choose>
					<when test="keyword !=null and !keyword.equals('')">
						WHERE
						P_TITLE <include refid="criteria"/>
						OR
						P_AUTHOR <include refid="criteria"/>
					</when>
					<when test='type="C"'>
						WHERE P_CATEGORY =#{p_category}
					</when>
				</choose>
				)
	</select>

	<!--  ========================== 상품 수정 ==============================	-->
	<update id="updateProduct" parameterType="product">
		UPDATE tb_product
		SET p_title = #{p_title}
		  ,  p_author = #{p_author}
		  ,  p_publisher = #{p_publisher}
		  ,  p_pubdate = #{p_pubdate}
		  ,  p_price = #{p_price}
		  ,  p_count = #{p_count}
		  ,  p_description= #{p_description}
		  ,  p_img = #{p_img}
		WHERE p_no = #{p_no}
	</update>

	<!--  ========================== 상품 삭제==============================	-->
	<delete id="deleteProduct" parameterType="int">
		DELETE from tb_product WHERE p_no= #{p_no}
	</delete>

	<!-- 결제 후 상품 수량 감소 -->
	<update id="updateProductCount" parameterType="java.util.List" >
		<foreach collection="list" item="item" index="index" open="DECLARE BEGIN" separator=";" close="; END;">
			UPDATE 	tb_product
			SET	p_count = p_count - #{item.p_count} WHERE 	p_no = #{item.p_no}

		</foreach>
	</update>

	<!--  [[ 회원탈퇴 시 좋아요한 상품 삭제 ]]	-->
	<delete id="deleteLikeByMem" parameterType="member">
		DELETE FROM TB_PRODUCTLIKE WHERE MEM_ID = #{mem_id}
	</delete>

	<!--  [[ 회원탈퇴 시 리뷰 삭제 ]]	-->
	<delete id="deleteReviewByMem" parameterType="member">
		DELETE FROM  TB_REVIEW WHERE MEM_ID = #{mem_id}
	</delete>
</mapper>